{"version":3,"sources":["Components/card/card.component.jsx","Components/card-list/card-list.component.jsx","Components/searchBox/search-box.component.jsx","App.js","reportWebVitals.js","index.js"],"names":["Card","props","className","alt","src","monster","id","name","email","CardList","monsters","map","SearchBox","placeholder","handleChange","type","onChange","App","state","searchField","fetch","then","response","json","users","setState","this","filteredMonsters","filter","toLowerCase","includes","e","target","value","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"yUAKaA,EAAM,SAACC,GAEhB,OACI,sBAAKC,UAAU,iBAAf,UAEI,qBAAKC,IAAI,UAAUC,IAAG,+BAA0BH,EAAMI,QAAQC,GAAxC,4BACtB,6BAAKL,EAAMI,QAAQE,OACnB,6BAAKN,EAAMI,QAAQG,YCNlBC,EAAW,SAAAR,GAEpB,OAEA,qBAAKC,UAAU,YAAf,SACCD,EAAMS,SAASC,KAAI,SAAAN,GAAO,OAAK,cAAC,EAAD,CAAuBA,QAASA,GAArBA,EAAQC,UCP1CM,G,MAAY,SAAC,GAAkC,IAAjCC,EAAgC,EAAhCA,YAAcC,EAAkB,EAAlBA,aACrC,OAEI,uBAAOZ,UAAW,SAClBa,KAAK,SACJF,YAAaA,EACbG,SAAUF,MCyDJG,E,kDA5Df,aAAc,IAAD,8BACX,gBACKC,MAAM,CACVR,SAAS,GACTS,YAAY,IAJF,E,qDASX,WAAoB,IAAD,OACjBC,MAAM,8CACLC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAK,OAAI,EAAKC,SAAS,CAACf,SAASc,S,oBAIzC,WAAS,IAAD,OACN,EAAgCE,KAAKR,MAA9BR,EAAP,EAAOA,SAAWS,EAAlB,EAAkBA,YACZQ,EAAmBjB,EAASkB,QAAQ,SAAAvB,GAAO,OAAIA,EAAQE,KAAKsB,cAAcC,SAASX,EAAYU,kBAGrG,OACE,sBAAK3B,UAAU,MAAf,UACE,kDACA,cAAC,EAAD,CACCW,YAAY,iBACZC,aAAc,SAAAiB,GAAC,OAAI,EAAKN,SAAS,CAACN,YAAYY,EAAEC,OAAOC,WAExD,cAAC,EAAD,CAAUvB,SAAUiB,EAApB,sB,GA9BUO,aCOHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBhB,MAAK,YAAkD,IAA/CiB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.007ad2d5.chunk.js","sourcesContent":["import React from 'react';\r\n\r\n\r\nimport './card.styles.css'\r\n\r\nexport const Card =(props) => {\r\n\r\n    return(\r\n        <div className=\"card-container\">\r\n\r\n            <img alt=\"monster\" src={`https://robohash.org/${props.monster.id}?set=set2&size=180x180`}></img>\r\n            <h2>{props.monster.name}</h2>\r\n            <h3>{props.monster.email}</h3>\r\n        </div>\r\n    );\r\n}","import React from 'react';\r\n\r\nimport './card-list.styles.css'\r\n\r\nimport {Card} from '../card/card.component'\r\n\r\nexport const CardList = props => {\r\n\r\n    return  (\r\n\r\n    <div className='card-list'> \r\n    {props.monsters.map(monster => (<Card key={monster.id} monster={monster}/>))}\r\n    </div>\r\n    \r\n    );\r\n    \r\n}\r\n\r\n","import React from 'react' ;\r\n\r\nimport './search-box.styles.css'\r\n\r\nexport const SearchBox = ({placeholder , handleChange}) => {\r\n    return (\r\n\r\n        <input className= 'search' \r\n        type=\"search\"\r\n         placeholder={placeholder} \r\n         onChange={handleChange} />\r\n    );\r\n\r\n}","import React , {Component} from 'react';\nimport './App.css';\nimport {CardList} from './Components/card-list/card-list.component'\nimport {SearchBox} from './Components/searchBox/search-box.component'\n\nclass App extends Component {\n\nconstructor(){\n  super();\n  this.state={\n   monsters:[],\n   searchField:''\n  };\n}\n\n\n  componentDidMount(){\n    fetch('https://jsonplaceholder.typicode.com/users')\n    .then(response => response.json())\n    .then(users => this.setState({monsters:users}));\n  }\n\n\n  render(){\n    const {monsters , searchField} =this.state;\n    const filteredMonsters = monsters.filter( monster => monster.name.toLowerCase().includes(searchField.toLowerCase()));\n\n\n    return(\n      <div className=\"App\">\n        <h1>Monsters Rolodex</h1>\n        <SearchBox \n         placeholder=\"Search monster\" \n         handleChange={e => this.setState({searchField:e.target.value})}\n        />\n        <CardList monsters={filteredMonsters} > </CardList>\n      </div>\n    );\n  }\n}\n\n\n/* <p>\n        {this.state.string}\n        </p>\n       <button onClick={()=>this.setState({string:'Helloooo Again'})}>Change text</button> */\n/* function App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <p>\n          Edit <code>src/App.js</code> and save to reload.\n        </p>\n        <a\n          className=\"App-link\"\n          href=\"https://reactjs.org\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Learn....\n        </a>\n      </header>\n    </div>\n  );\n} */\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}